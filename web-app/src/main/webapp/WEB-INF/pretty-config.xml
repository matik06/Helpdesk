<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<pretty-config xmlns="http://ocpsoft.com/prettyfaces/3.2.0"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://ocpsoft.com/prettyfaces/3.2.0
               http://ocpsoft.com/xml/ns/prettyfaces/ocpsoft-pretty-faces-3.2.0.xsd">                                       

    <lifecycle>
        <phase-listener>com.ocpsoft.pretty.faces.event.MultiPageMessagesSupport</phase-listener>
    </lifecycle>

    <url-mapping>
        <pattern value="/example"/>
        <view-id value="/example.xhtml"/>
    </url-mapping>
    
    <!-- 
        Konfiguracja widoków wraz z ich przekierowaniami
    -->
    
    <url-mapping>
        <pattern value="/"/>
        <view-id value="/index.xhtml"/>
    </url-mapping>
    
    <url-mapping id="info">
        <pattern value="/info"/>
        <view-id value="/index.xhtml"/>
    </url-mapping>
    
    <url-mapping id="contact">
        <pattern value="/contact"/>
        <view-id value="/contact.xhtml"/>    
    </url-mapping>
    
    <url-mapping id="login">
        <pattern value="/login"/>
        <view-id value="/login.xhtml"/>
    </url-mapping>
    
    <url-mapping id="invalid-session">
        <pattern value="/invalid-session"/>
        <view-id value="/invalidSession.xhtml"/>
    </url-mapping>
    
    <url-mapping id="access-deny">
        <pattern value="/access-deny"/>
        <view-id value="/accessDenied.xhtml"/>
    </url-mapping>
    
    <url-mapping id="error">
        <pattern value="/error"/>
        <view-id value="/error.xhtml"/>
    </url-mapping>
    
    
    <url-mapping id="helpdesk-users">
        <pattern value="/helpdesk-users"/>
        <view-id value="/views/helpdesk-users.xhtml"/>
    </url-mapping>
    
    <url-mapping id="customers">
        <pattern value="/customers"/>
        <view-id value="/views/customers.xhtml"/>
    </url-mapping>
    
    <url-mapping id="customers-users">
        <pattern value="/customer/#{/\\d+/ customer}/users" />
        <view-id value="/views/customer-detail.xhtml"/>
    </url-mapping>
    
    <url-mapping id="tasks">
        <pattern value="/tasks"/>
        <view-id value="/views/tasks.xhtml"/>
    </url-mapping>
    
    <url-mapping id="task-detail">
        <pattern value="/task/#{/\\d+/ taskId}/detail" />
        <view-id value="/views/task-detail.xhtml"/>
    </url-mapping>
    
    <url-mapping id="updates">
        <pattern value="/updates"/>
        <view-id value="/views/updates.xhtml"/>
    </url-mapping>
    
    <url-mapping id="update-detail">
        <pattern value="/update/#{/\\d+/ upgradeId}/detail" />
        <view-id value="/views/update-details.xhtml"/>
    </url-mapping>    
<!--    
        Przyklady uzycia prettyfaces
    
    <url-mapping id="store"> 
        <pattern value="/store" /> 
        <view-id value="/pf/store.xhtml" />
    </url-mapping>
    
    <url-mapping id="viewCategory">
        <pattern value="/store/#{ cat }/" />  do zmiennej cat typu GET (/some/url?cat=) podstawiana jest zawartosc linka 
        <view-id value="/pf/store.xhtml" /> 
    </url-mapping>
    
    <url-mapping id="viewCategory">
        <pattern value="/store2/#{store.category}/" />  wartosc z linka wstawiana jest bezposrednio do zmiennej store.category 
        <view-id value="/pf/store.xhtml" /> 
    </url-mapping>
    
    <url-mapping id="viewCategory">
        <pattern value="/store3/#{ cat : store.category }/" />  robi oba podstawienia 
        <view-id value="/pf/store.xhtml" /> 
    </url-mapping>
    
    <url-mapping id="viewCategory">
        <pattern value="/store5/#{/\\d+/ store.category }/" />  parametrem może być tylko liczba 
        <view-id value="/pf/store.xhtml" />         
    </url-mapping>    -->
    
    <!--
        inject url parameter to some bean
        <query-param name="language"> #{bean.language} </query-param>
        
        the same as above and also remove parameter from postback
        <query-param name="query" onPostback="false">#{searchBean.query}</query-param>
    -->
    
<!--     URL inherit  
    <url-mapping id="store"> 
        <pattern value="/store" /> 
         Result: /store 
        <view-id value="/faces/shop/store.jsf" />
    </url-mapping>

    <url-mapping parentId="store" id="category"> 
        <pattern value="/#{category}" /> 
         Result: /store/#{category} 
        <view-id value="/faces/shop/category.jsf" /> 
    </url-mapping>
    
     Load data when accessing mapped URLs 
    <url-mapping id="viewCategory">
        <pattern value="/store6/#{/\\d+/ store.category }/" /> 
        <view-id value="/pf/store.xhtml" />
        <action onPostback="false">#{store.process2}</action>    wywołanie metody po ustawieniu parametrów z adresu url, gdy metoda zwróci: pretty:mappingId to następuje kolejne przekierowania (np gdy user nie ma odpowiednich uprawnien do tej akcji( 
    </url-mapping>-->
    

    <!-- annotations
    
        web.xml:
        <context-param>
            <param-name>com.ocpsoft.pretty.BASE_PACKAGES</param-name>
            <param-value>com.example.myapp,com.ocpsoft</param-value>
        </context-param>
    
        wiele adresow (przy definicji klasy):
        @URLMappings(mappings={
            @URLMapping(id = "categoryBean", pattern = "/store/#{ bean.category }/", viewId = "/faces/shop/store.jsf"),
            @URLMapping(id = "categoryBean2", pattern = "/shop/#{ bean.category }/", viewId = "/faces/shop/store.jsf")
        })
        
        wywolanie metody (przy definicji metody)
        @URLAction
        @URLAction(phaseId=PhaseId.RENDER_RESPONSE, onPostback=false)
        
        wywolanie metody w innym beanie:
        @URLAction(mappingId = "viewItem")
        
        query parameters (przy definicje pola w klasie):
        @URLQueryParameter("language")
        
        
        
        <h:commandLink action="pretty:home"> Go home. </h:commandLink> 
        <h:commandLink action="pretty:"> Refresh this page. </h:commandLink> 
    -->
    
</pretty-config>

